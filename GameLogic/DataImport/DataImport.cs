using DryGinStudios.PuzzleFit3D.Meta.Data;
using MetaLoop.Common.DataEngine;
using MetaLoop.Common.PlatformCommon;
using MetaLoop.Common.PlatformCommon.Data;
using MetaLoop.Common.PlatformCommon.Data.Schema;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading;

namespace MetaLoop.GameLogic.DataImport
{
    public class DataImport
    {

        public static void ImportData(DataSet data, ManualResetEvent resetEvent)
        {
            Console.WriteLine("Importing data...");

            ImportDataStatus.Reset();

            CodeFirtsImport.ObjectsMemoryCache = new Dictionary<string, List<object>>();

            ImportCustomDataBeforeAutomation(data, false);

            CodeFirtsImport.ImportAutoGeneratedObjects(data, SchemaBuilder.CodeFirstTypes, false);

            //ImportCustomDataAfterAutomation(data, false);

            if (MetaDataImportExeption.SchemaErrors.Count > 0)
            {
                MetaDataImportExeption.SchemaErrors.ForEach(y => Console.WriteLine(y));
            }
            else
            {

                DataVersion dataVersioRow = null;
                try { dataVersioRow = DataLayer.Instance.Connection.Table<DataVersion>().FirstOrDefault(); } catch { }

                int currentVersion = dataVersioRow == null ? 0 : dataVersioRow.Version;


                Console.WriteLine("Schema validated with no errors.");

                foreach (Type t in SchemaBuilder.CodeFirstTypes)
                {
                    string dropTableScript = string.Format("DROP Table {0};", t.Name);
                    TableClassCodeFirstGenerator codeGen = new TableClassCodeFirstGenerator(t);
                    string createTableScript = codeGen.CreateTableScript();

                    try
                    {
                        int resultDrop = DataLayer.Instance.Connection.Execute(dropTableScript);
                        Console.WriteLine("Dropped " + t.Name);
                    }
                    catch
                    {

                        Console.WriteLine("Could not drop table " + t.Name);
                    }

                    int resultCreate = DataLayer.Instance.Connection.Execute(createTableScript);
                }

          



                CodeFirtsImport.ObjectsMemoryCache = new Dictionary<string, List<object>>();

                ImportCustomDataBeforeAutomation(data, true);

                CodeFirtsImport.ImportAutoGeneratedObjects(data, SchemaBuilder.CodeFirstTypes, true);

                dataVersioRow = new DataVersion() { Version = currentVersion + 1 };
                DataLayer.Instance.Connection.Insert(dataVersioRow);


                ImportCustomDataAfterAutomation(data, true);


                ImportDataStatus.WriteStatus("Updating Database Version to " + dataVersioRow.Version.ToString() + "...");
                DataLayer.Instance.Connection.Update(dataVersioRow);

                ImportDataStatus.WriteStatus("Import completed! Bravo Soldier! Total Import time: " + (ImportDataStatus.TotalSeconds / 60).ToString() + " min.");

                //if (Main.IsDatabaseInRam)
                //{
                //    try
                //    {
                //        File.Copy(Main.RamDbPath, Main.DbPath, true);
                //        WriteStatus("Unloaded database from RAM to DISK...Success");
                //    }
                //    catch
                //    {
                //        WriteStatus("ERROR: Could not unload databse from RAM to DISK...");
                //    }
                //}

                DataLayer.Instance.Kill();
            }

            resetEvent.Set();
        }


        public static void ImportCustomDataBeforeAutomation(DataSet data, bool updateDatabase)
        {

        }
        public static void ImportCustomDataAfterAutomation(DataSet data, bool updateDatabase)
        {
      
            Console.WriteLine("Assignsing MissionNumbers based on chapters...");

            var allChapters = DataLayer.Instance.GetTable<ChapterData>();

            int missionId = 0;
            int allMissionsCount = 0;
            foreach (var chapter in allChapters)
            {
                var allMissions = DataLayer.Instance.GetTable<MissionData>().Where(y => y.ChapterId == chapter.Id).ToList();
                missionId = 0;
                foreach (var mission in allMissions)
                {
                    allMissionsCount++;
                    missionId++;
                    mission.MissionNumber = missionId;
                    if (updateDatabase) DataLayer.Instance.Connection.Update(mission);
                }
            }

            if (updateDatabase)
                Console.WriteLine($"Completed iterating {allMissionsCount} missions for number assignement.");

        }
    }
}
 